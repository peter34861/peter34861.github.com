<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 未分类 | 痞子_朱 运维之路.....]]></title>
  <link href="http://peter34861.github.io/blog/categories/wei-fen-lei/atom.xml" rel="self"/>
  <link href="http://peter34861.github.io/"/>
  <updated>2014-04-14T17:25:45+08:00</updated>
  <id>http://peter34861.github.io/</id>
  <author>
    <name><![CDATA[Peter Zhu]]></name>
    <email><![CDATA[zhuwen5720@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mysql 日常操作 【基础篇】]]></title>
    <link href="http://peter34861.github.io/blog/2013/01/05/mysql_ctrl_base/"/>
    <updated>2013-01-05T00:00:00+08:00</updated>
    <id>http://peter34861.github.io/blog/2013/01/05/mysql_ctrl_base</id>
    <content type="html"><![CDATA[<p>一： 数据库备份。</p>




<p>1）， 备份数单库。 （mysqldump -u用户名 -p密码 -h主机 数据库 --lock-all-tables &gt; 路径）</p>




<p><strong>例：A#mysqldump -uroot -ppassword  -hlocalhost  db1  --lock-all-tables &gt; /opt/db1.sql</strong></p>




<p>2), 按条件备份。（mysqldump -u用户名 -p密码 -h主机 数据库 a --where "条件语句" --no-建表&gt; 路径 ）</p>




<p><strong>例：A# mysqldump -uroot -ppassword dbname a --where "tag='88'" --no-create-info&gt; /opt/a.sql</strong></p>




<p>3)，mysql 全库备份。</p>




<p><strong>例：A # mysqldump --all-databases -ppasswd &gt; /opt/all_database.sql</strong></p>




<p>二，还原数据库。</p>




<p>* mysqldump -u用户名 -p密码 -h主机 数据库 &lt; 路径</p>




<p>例：mysql -uroot -p1234 db1 &lt; /opt/a.sql</p>




<p>三， mysql 常用参数。</p>




<p><strong>--compatible=name</strong></p>




<p>它告诉 mysqldump，导出的数据将和哪种数据库或哪个旧版本的 MySQL 服务器相兼容。值可以为 ansi、mysql323、mysql40、postgresql、oracle、mssql、db2、maxdb、no_key_options、 no_tables_options、no_field_options 等，要使用几个值，用逗号将它们隔开。当然了，它并不保证能完全兼容，而是尽量兼容。</p>




<p><strong>--default-character-set=charset</strong></p>




<p>指定导出数据时采用何种字符集，如果数据表不是采用默认的 latin1 字符集的话，那么导出时必须指定该选项，否则再次导入数据后将产生乱码问题。</p>




<p><strong>--disable-keys</strong></p>




<p>告诉 mysqldump 在 INSERT 语句的开头和结尾增加 /*!40000 ALTER TABLE table DISABLE KEYS */; 和 /*!40000 ALTER TABLE table ENABLE KEYS */; 语句，这能大大提高插入语句的速度，因为它是在插入完所有数据后才重建索引的。该选项只适合 MyISAM 表。</p>




<p><strong>--lock-all-tables，-x</strong></p>




<p>在开始导出之前，提交请求锁定所有数据库中的所有表，以保证数据的一致性。这是一个全局读锁，并且自动关闭 --single-transaction 和 --lock-tables 选项。</p>




<p><strong>--lock-tables</strong></p>




<p>它和 --lock-all-tables 类似，不过是锁定当前导出的数据表，而不是一下子锁定全部库下的表。本选项只适用于 MyISAM 表，如果是 Innodb 表可以用 --single-transaction 选项。</p>


<!--more-->




<p><strong>--no-create-info，-t</strong></p>




<p>只导出数据，而不添加 CREATE TABLE 语句。</p>




<p><strong>--no-data，-d</strong></p>




<p>不导出任何数据，只导出数据库表结构。</p>




<p><strong>--opt</strong></p>




<p>这只是一个快捷选项，等同于同时添加 --add-drop-tables --add-locking --create-option --disable-keys --extended-insert --lock-tables --quick --set-charset 选项。本选项能让 mysqldump 很快的导出数据，并且导出的数据能很快导回。该选项默认开启，但可以用 --skip-opt 禁用。注意，如果运行 mysqldump 没有指定 --quick 或 --opt 选项，则会将整个结果集放在内存中。如果导出大数据库的话可能会出现问题。</p>




<p><strong>--quick，-q</strong></p>




<p>该选项在导出大表时很有用，它强制 mysqldump 从服务器查询取得记录直接输出而不是取得所有记录后将它们缓存到内存中。</p>




<p><strong>--single-transaction</strong></p>




<p>该选项在导出数据之前提交一个 BEGIN SQL语句，BEGIN 不会阻塞任何应用程序且能保证导出时数据库的一致性状态。它只适用于事务表，例如 InnoDB 和 BDB。 本选项和 --lock-tables 选项是互斥的，因为 LOCK TABLES 会使任何挂起的事务隐含提交。 要想导出大表的话，应结合使用 --quick 选项。</p>




<p><strong>--triggers</strong></p>




<p>同时导出触发器。该选项默认启用，用 --skip-triggers 禁用它。</p>




<p>&nbsp;</p>




<p>&nbsp;</p>

]]></content>
  </entry>
  
</feed>
